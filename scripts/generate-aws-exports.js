#!/usr/bin/env node

/**
 * Script to generate aws-exports.js from CDK stack outputs
 * This enables the frontend to use CDK-deployed infrastructure
 * 
 * Usage:
 *   node scripts/generate-aws-exports.js [--env <environment>] [--output-file <path>]
 * 
 * Options:
 *   --env          Environment name (dev, staging, prod). Default: dev
 *   --output-file  Output file path. Default: src/aws-exports.js
 * 
 * The script can read CDK outputs from either:
 * 1. AWS CloudFormation (requires AWS CLI configured)
 * 2. Local JSON file at cdk/outputs/cdk-outputs-{env}.json
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Parse command line arguments
const args = process.argv.slice(2);
const envIndex = args.indexOf('--env');
const environment = envIndex !== -1 && args[envIndex + 1] ? args[envIndex + 1] : 'dev';
const outputIndex = args.indexOf('--output-file');
const outputFile = outputIndex !== -1 && args[outputIndex + 1] 
  ? args[outputIndex + 1] 
  : path.join(__dirname, '..', 'src', 'aws-exports.js');

// Validate environment parameter to prevent command injection
const allowedEnvironments = ['dev', 'staging', 'prod'];
if (!allowedEnvironments.includes(environment)) {
  console.error(`❌ Invalid environment: ${environment}`);
  console.error(`Allowed environments: ${allowedEnvironments.join(', ')}`);
  process.exit(1);
}

// Stack names based on environment
const stackPrefix = 'LittleBit';
const coreStackName = `${stackPrefix}-Core-${environment}`;
const apiStackName = `${stackPrefix}-API-${environment}`;
const computeStackName = `${stackPrefix}-Compute-${environment}`;

/**
 * Fetch stack outputs from AWS CloudFormation
 */
async function fetchStackOutputs(stackName) {
  try {
    // Additional validation for stack name (defense in depth)
    if (!/^[a-zA-Z0-9-]+$/.test(stackName)) {
      throw new Error(`Invalid stack name format: ${stackName}`);
    }
    
    const command = `aws cloudformation describe-stacks --stack-name ${stackName} --query "Stacks[0].Outputs" --output json`;
    const output = execSync(command, { encoding: 'utf-8' });
    const outputs = JSON.parse(output);
    
    // Convert array of outputs to key-value object
    const outputsMap = {};
    outputs.forEach(output => {
      outputsMap[output.OutputKey] = output.OutputValue;
    });
    
    return outputsMap;
  } catch (error) {
    console.error(`Failed to fetch outputs for stack ${stackName}:`, error.message);
    return null;
  }
}

/**
 * Read outputs from local JSON file
 */
function readLocalOutputs() {
  const outputsFile = path.join(__dirname, '..', 'cdk', 'outputs', `cdk-outputs-${environment}.json`);
  
  if (!fs.existsSync(outputsFile)) {
    console.log(`Local outputs file not found: ${outputsFile}`);
    return null;
  }
  
  try {
    const content = fs.readFileSync(outputsFile, 'utf-8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`Failed to read local outputs file:`, error.message);
    return null;
  }
}

/**
 * Generate aws-exports.js content from CDK outputs
 */
function generateAwsExports(outputs) {
  const { core, api, compute } = outputs;
  
  if (!core || !api) {
    throw new Error('Missing required stack outputs (Core or API)');
  }
  
  const config = {
    // AWS Project configuration
    aws_project_region: process.env.CDK_DEPLOY_REGION || 'us-west-2',
    
    // Cognito configuration
    aws_cognito_identity_pool_id: core.IdentityPoolId,
    aws_cognito_region: process.env.CDK_DEPLOY_REGION || 'us-west-2',
    aws_user_pools_id: core.UserPoolId,
    aws_user_pools_web_client_id: core.UserPoolClientId,
    
    // AppSync API configuration
    aws_appsync_graphqlEndpoint: api.GraphQLAPIURL,
    aws_appsync_region: process.env.CDK_DEPLOY_REGION || 'us-west-2',
    aws_appsync_authenticationType: 'AMAZON_COGNITO_USER_POOLS',
    aws_appsync_apiKey: api.GraphQLAPIKey,
    
    // S3 Storage configuration
    aws_user_files_s3_bucket: core.AudioBucketName,
    aws_user_files_s3_bucket_region: process.env.CDK_DEPLOY_REGION || 'us-west-2',
    
    // Additional configuration that might be needed
    aws_mobile_analytics_app_id: undefined,
    aws_mobile_analytics_app_region: process.env.CDK_DEPLOY_REGION || 'us-west-2',
  };
  
  // Add optional compute configuration if available
  if (compute && compute.ProcessingQueueUrl) {
    config.aws_sqs_queue_url = compute.ProcessingQueueUrl;
  }
  
  return config;
}

/**
 * Write aws-exports.js file
 */
function writeAwsExports(config, filePath) {
  const content = `/* eslint-disable */
// WARNING: DO NOT EDIT. This file is automatically generated by scripts/generate-aws-exports.js
// Generated from CDK stack outputs for environment: ${environment}
// Generated at: ${new Date().toISOString()}

const awsmobile = ${JSON.stringify(config, null, 4)};

export default awsmobile;
`;
  
  // Ensure directory exists
  const dir = path.dirname(filePath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  fs.writeFileSync(filePath, content);
  console.log(`✅ Generated ${filePath}`);
}

/**
 * Main function
 */
async function main() {
  console.log(`🔧 Generating aws-exports.js for environment: ${environment}`);
  
  let outputs = {};
  
  // Try to fetch from AWS CloudFormation first
  console.log('📡 Attempting to fetch outputs from AWS CloudFormation...');
  const coreOutputs = await fetchStackOutputs(coreStackName);
  const apiOutputs = await fetchStackOutputs(apiStackName);
  const computeOutputs = await fetchStackOutputs(computeStackName);
  
  if (coreOutputs && apiOutputs) {
    outputs = {
      core: coreOutputs,
      api: apiOutputs,
      compute: computeOutputs || {}
    };
    console.log('✅ Successfully fetched outputs from AWS');
  } else {
    // Fall back to local file
    console.log('📁 Attempting to read outputs from local file...');
    const localOutputs = readLocalOutputs();
    
    if (localOutputs) {
      outputs = localOutputs;
      console.log('✅ Successfully read outputs from local file');
    } else {
      console.error('❌ Failed to obtain CDK outputs from any source');
      console.log('\nPlease ensure either:');
      console.log('1. AWS CLI is configured and CDK stacks are deployed, or');
      console.log(`2. CDK outputs are saved to cdk/outputs/cdk-outputs-${environment}.json`);
      process.exit(1);
    }
  }
  
  try {
    // Generate configuration
    const config = generateAwsExports(outputs);
    
    // Write to file
    writeAwsExports(config, outputFile);
    
    console.log('\n🎉 Successfully generated aws-exports.js!');
    console.log(`Environment: ${environment}`);
    console.log(`Output file: ${outputFile}`);
    
  } catch (error) {
    console.error('❌ Failed to generate aws-exports.js:', error.message);
    process.exit(1);
  }
}

// Run the script
main().catch(error => {
  console.error('Unexpected error:', error);
  process.exit(1);
});